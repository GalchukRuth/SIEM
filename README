SIEM project by Ruth Galchuk
============================
Software product that provides a real-time analysis of security alerts generated by applications and network hardware

Files
-----
- Log_Parser.py -
- Log_Analizer.py -
- Client.py -
- Port_Scan.txt, Ping_Swip.txt, Suspicious_Port.txt - log files for Log_Analizer's functions
 going to simulate Firewall’s log files and going to have a similar structure as the firewall

Instructions
------------
In this exercise you need to create a DB server with relevant tables, python code that simulates a firewall (reads log file of FW) and python code that analyze the data and discover few threats – ping sweep, port scan and suspicious ports.

Few important points:
•	Remember not to copy SQL commands from Word to shell (Word not using the same apostrophe).
•	Python requirements:
    o	Pycharm
    o	Mysql connector module – open CMD and write ‘pip install mysql-connector’ OR ‘python -m pip install mysql-connector
Log Files
On this exercise, log files are going to simulate Firewall’s log files and going to have a similar structure as the firewall.
Log files structure:
Delimiter - space
•	Datetime – type of datetime, date and time (YYYY-m-d 00:00:00)
•	Source IP – IP address of source (X.X.X.X)
•	Destination IP – destination IP address (Y.Y.Y.Y)
•	Port – destination port (445,23,80)
•	Action – if packet dropped or not (Pass or Drop)
For example:

2018-4-21 19:42:41 192.168.1.1 192.168.2.100 445 PASS

Database
We need to save all data on a DB, we will use MySQL DB on a Linux server 16.04.
Complete the following:
•	Install Ubuntu Linux Server 16.04 on a virtual machine.
•	Install MySQL server (sudo apt-get install mysql-server-5.7).
•	Create a new database named siem (CREATE DATABASE siem).
•	Create a new table named ‘fwlogs’ with the following columns (you can copy the query from the Appendix):
    o	ID INT AUTO_INCREMENT
    o	DATE DATETIME NOT NULL
    o	SRC_IP varchar(16) NOT NULL
    o	DST_IP varchar(16) NOT NULL
    o	PORT INT NOT NULL
    o	PROTOCOL VARCHAR(20) NOT NULL
    o	ACTION VARCHAR(10) NOT NULL
    o	PRIMARY KEY(ID));

•	Give MySQL’s root user a privilege to connect remotely.
    o	On MySQL console:
    o	GRANT ALL PRIVILEGES ON *.* TO 'root'@'%’ IDENTIFIED BY ‘your_password’’;
    o	Flush privileges;
•	Set MySQL to listen on all IP addresses. You need to change configuration file of MySQL:
    o	Backup the configuration file – sudo cp /etc/mysql/mysql.conf.d/mysqld.cnf cnf.bck
    o	sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf
    o	search for this line: bind-address = 127.0.0.1
    o	change this line to: bind-address = 0.0.0.0
    o	save the file
    o	restart mysql service

•	Flush iptables – this will disable the Linux firewall.
    o	sudo iptables -F
•	Download the MySQL connection script from drive. change details as needed and check connection.
•	Few errors could appear, look at the appendix to solve them.

Python code – Firewall log file parser
Look at the samples of python with mysql.connector module and do the following:
1.	Write a python function to get dictionary from log file. Dictionary’s keys example:
{'SRC_IP': '192.168.1.1', 'ACTION': 'PASS', 'DATE': '2018-4-21 19:42:48', 'DST_IP': '192.168.2.100', 'PORT': '445'}

Notice that time and date are included in one DATE key.

2.	Write a python function to get a port number and return protocol’s name. If port’s number doesn’t have a known protocol, write UNKOWN
For example – PortToProtocol(23) -> TELNET
For example – PortToProtocol(80) -> HTTP
For example – PortToProtocol(4445) -> UNKNOWN

Use this dictionary to help you.
PORTS = {'21' : 'FTP', '22' : 'SSH', '23' : 'TELNET', '25' : 'SMTP' , '67' : 'DHCP' , '53'  : 'DNS' , '80' : 'HTTP', '445'
: 'SMB' ,'443' : 'HTTPS'}

3.	Add a line to create a merge of log dictionary and protocol to get this dictionary:
# {'PROTOCOL': 'SMB', 'SRC_IP': '192.168.1.1', 'ACTION': 'PASS', 'DATE': '2018-4-21 19:42:43', 'DST_IP': '192.168.2.100', 'PORT': '445'}

4.	Write a python function to get a log dictionary and insert it into the DB (look on Appendix - InsertToDB() function to use insertion with mysql.connector)
5.	For your convenience, delete all rows before adding new lines (not must).


Python Code – Log Analyzer
This python script gets data from the DB and analyze sort of attacks. We are going to define 4 different attacks:
1.	Specific Port – IP address that trying to connect another computer with suspicious port.
2.	Port Scan (without time aspects) – IP address that trying to connect more than 10 different ports.
3.	Ping Sweep (without time aspects) – IP address that searching for different IP addresses with ping (port 0)
4.	Ping Sweep (with time aspect) – same as ping sweep but within 10 seconds.

Specific Port
Use SELECT statement to get all source IP addresses that connecting on port 444 or 4445.

Port Scan
For this exercise, let’s say that port scan defined by any IP address that trying to connect another computer in more than 10 different ports.
For example, 192.168.1.1 is trying to connect 192.168.2.100 in 12 different ports but 192.168.1.3 is trying to connect 192.168.2.100 in 9 different ports and 192.168.2.101 in 9 different ports. The only suspect of port scan will be 192.168.1.1

There are 2 ways of getting the suspect:
1.	Using SQL statement that includes COUNT, DISTINCT and GROUP BY (See examples on Appendix)
2.	Using Python (preferred) – SELECT with DISTINCT only lines with same source and destination but different ports.

For example: 192.168.1.2 tried to connect 192.168.2.100 5 times on port 445 but we see only 1 line for that.
Now, count all lines with same source and same destination.

Ping Sweep
Ping sweep defined by same IP address that trying to get more than 10 different IP addresses with ping (Here it will be port 0).
To do so, use SELECT statement to get all source IP addresses and destination IP address where port is equal to 0.
Count how many times each source is using ping, alert for each that trying more than 10 different hosts.

With time
Look at appendix to calculate time differences.
Add time differences to lower than 10 seconds to ping sweep conditions (more than 10 hosts in less than 10 seconds).
